name: Push image
on:
  workflow_call:
    inputs:
      containerfile:
        description: Which containerfile/dockerfile to build
        required: true
        type: string
      image:
        description: image name
        required: true
        type: string
      tag:
        description: image tag
        required: true
        type: string
      update-check:
        description: command to run on old image and check for updates
        required: true
        type: string

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      detected: ${{ steps.result.outputs.detected }}
    steps:
      - uses: actions/checkout@v4

      - name: Pull latest image
        run: |
          latest_tag="ghcr.io/${{ inputs.image }}:${{ inputs.tag }}"
          echo "latest_tag=$latest_tag" >> "$GITHUB_ENV"

          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io \
            -u ${{ github.actor }} --password-stdin
          docker pull "$latest_tag" || true
          docker logout ghcr.io

      - name: Check if git revision has changed
        id: revision
        run: |
          revision="$(docker image inspect --format \
            '{{index .Config.Labels "org.opencontainers.image.revision"}}' \
            "$latest_tag" 2>/dev/null || echo 'none')"
          echo "$revision"
          if [ "$revision" != "$GITHUB_SHA" ]; then
            echo "Latest image revision ($revision) is not the same as current revision ($GITHUB_SHA)"
            echo "changed_revision=true" >> result
          else
            echo "Latest image revision is the same as current revision ($GITHUB_SHA)"
            echo "changed_revision=false" >> result
          fi

      - name: Check for new updates
        id: updates
        run: |
          packages="$(docker run --rm --entrypoint=/bin/sh "$latest_tag" -c "${{ inputs.update-check }}" 2>/dev/null || echo '')"
          echo "$packages"
          if [ "${#packages}" -gt 0 ]; then
            echo "Updates available"
            echo "new_updates=true" >> result
          else
            echo "No new updates"
            echo "new_updates=false" >> result
          fi

      - name: Results
        id: result
        run: |
          cat result
          if grep -q "=true" result; then
            echo "Result: changes detected"
            echo "detected=true" >> "$GITHUB_OUTPUT"
          else
            echo "Result: no change detected"
            echo "detected=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.detected == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Login to DockerHub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-platform image (DockerHub + GHCR)
        run: |
          docker buildx build . \
            --pull \
            --file="${{ inputs.containerfile }}" \
            --platform=linux/amd64,linux/arm64 \
            # --tag="${{ inputs.image }}:${{ inputs.tag }}" \
            --tag="ghcr.io/${{ inputs.image }}:${{ inputs.tag }}" \
            --label="org.opencontainers.image.source=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
            --label="org.opencontainers.image.revision=$GITHUB_SHA" \
            --label="org.opencontainers.image.created=$(date --rfc-3339=seconds)" \
            --push

      # Optional: Test the built image for one platform on the runner (amd64)
      - name: Test image (amd64 only)
        run: tests/run "${{ inputs.image }}:${{ inputs.tag }}"
        # If your test/run script supports multi-platform and QEMU is available,
        # you can extend tests to arm64.
